{% extends 'base.html.twig' %}

{% block title %}Hello VisaController!{% endblock %}

{% block body %}

<div id="app">
    <form action="#">
        <div>
            <label for="originCountry">Origin Country</label>
            <select id="originCountry" v-model="originCountry">
                <option v-for="country in countries" :value="country.code">${ country.name }</option>
            </select>
        </div>

        <div>
            <label for="destCountry">Destination Country</label>
            <select id="destCountry" v-model="destCountry">
                <option v-for="country in countries" :value="country.code">${ country.name }</option>
            </select>
        </div>

        <div v-for="stayPeriod in stayPeriods">
            {# First entry date #}
            <input v-model="stayPeriod.entry" type="date" value="${ stayPeriod.entry }">
            to
            {# Exit date #}
            <input v-model="stayPeriod.exit" type="date" value="${ stayPeriod.exit }">

            ${ dateMinusDate(stayPeriod.entry, stayPeriod.exit) }
        </div>

        <div>
            <button type="button" @click="addStayRow">Add Row</button>
        </div>

        <div>
            Citizens of ${ originCountry } can stay in ${ destCountry } for ${ visaDetails.maxStay } days at a time over a period of
            ${ visaDetails.maxDays } days, which resets after ${ visaDetails.resetPeriod } days
        </div>
        <div>
            According to the planner you will stay for a total of ${ totalDaysStayed } days, which leaves you with ${ visaDetails.maxDays - totalDaysStayed } more days remaining
        </div>
        <div>
            Your ${ visaDetails.resetPeriod } day period will reset on ${ resetDate }
        </div>
    </form>
</div>

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
<script>
const { createApp, ref } = Vue

const MILLISECONDS_IN_A_DAY = 86400000

const app = createApp({
    created() {
        fetch('/api/countries')
            .then(res => res.json())
            .then(json => { this.countries = json["hydra:member"] })
    },
    data: () => ({
        // Initial values
        originCountry: 'PH',
        destCountry: 'KZ',

        countries: [],

        stayPeriods: [
            { entry: '2024-02-26', exit: '2024-03-24' },
        ],

        visaExemptions: [
            // Citizens of ${ originCountry } can stay in ${ destCountry } for A days at a time over a period of B days, which resets after C days
            {destCountry: 'KZ', originCountry: 'PH', maxStay: 30, maxDays: 90, resetPeriod: 180,  notes: ''},
            {destCountry: 'KZ', originCountry: 'US', maxStay: 30, maxDays: 90, resetPeriod: 180, notes: ''},

            {destCountry: 'KG', originCountry: 'PH', maxStay: 30, maxDays: 30, resetPeriod: 30,  notes: ''},
            {destCountry: 'KG', originCountry: 'US', maxStay: 60, maxDays: 60, resetPeriod: 120, notes: ''},
        ],

    }),
    computed: {
        totalDaysStayed() {
            let totalDays = 0

            for(const period of this.stayPeriods) {
                totalDays += this.dateMinusDate(period.entry, period.exit)
            }

            return totalDays
        },
        resetDate() {
            return new Date(this.datePlusDays(this.stayPeriods[0].entry, this.visaDetails.resetPeriod)).toDateString()
        },
        visaDetails() {
            for(let data of this.visaExemptions) {
                if(data.destCountry === this.destCountry && data.originCountry === this.originCountry) {
                    return data
                }
            }
        }
    },
    methods: {
        dateMinusDate(dateString1, dateString2) {
            const date1 = new Date(dateString1)
            const date2 = new Date(dateString2)
            const elapsedMilliseconds = date2 - date1
            const elapsedDays = elapsedMilliseconds / MILLISECONDS_IN_A_DAY

            return elapsedDays ? elapsedDays : 0
        },
        datePlusDays(dateString1, days) {
            const date1 = new Date(dateString1);
            return date1.getTime() + (days * MILLISECONDS_IN_A_DAY)
        },
        addStayRow() {
            this.stayPeriods.push({
                entry: "0000-00-00",
                exit: "0000-00-00",
            })
        }
    },
    delimiters: ['${', '}']
})
app.mount('#app')

</script>
{% endblock %}
